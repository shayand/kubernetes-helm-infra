apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "gitlab-zoekt.configZoektGatewayMapName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "gitlab-zoekt.labels" . | nindent 4 }}
    {{- include "gitlab.standardLabels" . | nindent 4 }}
    {{- include "gitlab.commonLabels" . | nindent 4 }}
data:
  nginx.conf: |
    events {
        use epoll;
    }

    http {
        upstream indexer {
          server 127.0.0.1:{{ .Values.indexer.listen.port }};
        }

        upstream webserver {
          server 127.0.0.1:{{ .Values.webserver.listen.port }};
        }

        {{- if .Values.gateway.http2 }}
        http2 on;
        {{- end }}

        server {
            {{- if .Values.gateway.tls.certificate.enabled }}
            listen       {{ .Values.gateway.listen.port }} ssl;
            ssl_certificate /etc/ssl/tls.crt;
            ssl_certificate_key /etc/ssl/tls.key;
            ssl_protocols TLSv1.2 TLSv1.3;
            {{- else }}
            listen       {{ .Values.gateway.listen.port }};
            {{- end }}
            {{- if .Values.gateway.basicAuth.enabled }}
            auth_basic "Zoekt Basic Authentication required";
            auth_basic_user_file /etc/nginx/basicauth/.htpasswd;
            {{- end }}
            server_tokens off;
            proxy_next_upstream off;
            proxy_set_header Authorization $http_authorization;

            # Internal gateway healthcheck
            location = /health {
              auth_basic off;
              return 200;
            }

            # Webserver healthcheck
            location = / {
              auth_basic off;
              proxy_pass http://webserver/;
            }

            # Webserver metrics
            location = /metrics {
              auth_basic off;
              proxy_pass http://webserver/metrics;
            }

            # Webserver metrics (alias)
            location = /webserver/metrics {
              auth_basic off;
              proxy_pass http://webserver/metrics;
            }

            # Indexer metrics
            location = /indexer/metrics {
              auth_basic off;
              proxy_pass http://indexer;
            }

            location /indexer {
              proxy_pass http://indexer;
              proxy_read_timeout 30m;
            }

            location /webserver {
                proxy_pass http://webserver;
                proxy_read_timeout 1m;
            }

            # HTTP webserver endpoint
            location /api {
                proxy_pass http://webserver;
                proxy_read_timeout 1m;
            }

            # gRPC catch all
            location / {
                grpc_pass grpc://webserver;
                grpc_set_header Content-Type application/grpc;
                grpc_read_timeout 1m;
                grpc_send_timeout 1m;
            }
        }
    }
